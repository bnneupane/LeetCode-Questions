class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> visited(n, vector<int>(m, -1));
        queue<pair<pair<int, int>, int>> q;

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(grid[i][j] == 2){
                    q.push(make_pair(make_pair(i, j), 0));
                    visited[i][j] = 2;
                }
            }
        }

        int time = 0;

        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;

            q.pop();

            if(row + 1 < n && grid[row + 1][col] == 1 && visited[row + 1][col] == -1){
                visited[row + 1][col] = 2;
                q.push(make_pair(make_pair(row + 1, col), t + 1));
            }

            if(row - 1 >= 0 && grid[row - 1][col] == 1 && visited[row - 1][col] == -1){
                visited[row - 1][col] = 2;
                q.push(make_pair(make_pair(row - 1, col), t + 1));
            }

            if(col + 1 < m && grid[row][col + 1] == 1 && visited[row][col + 1] == -1){
                visited[row][col + 1] = 2;
                q.push(make_pair(make_pair(row, col + 1), t + 1));
            }

            if(col - 1 >= 0 && grid[row][col - 1] == 1 && visited[row][col - 1] == -1){
                visited[row][col - 1] = 2;
                q.push(make_pair(make_pair(row, col - 1), t + 1));
            }

            time = t;

        }

        for(int i = 0 ; i < n ;i++){
            for(int j = 0 ; j < m ; j++){
                if(grid[i][j] == 1 && visited[i][j] != 2)
                    return -1;
            }
        }

        return time;
        
    }
};
