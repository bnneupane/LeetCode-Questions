// class Solution {
// public:
//     const int m = 1000000007;
//     int sumSubarrayMins(vector<int>& arr) {
//         int ans = 0;

//         for(int i = 0 ; i < arr.size() ; i++){
//             int mini = INT_MAX;
//             for(int j = i ; j < arr.size() ; j++){
//                 mini = min(mini, arr[j]);
//                 ans = (ans + mini) % m;
//             }
//         }
//         return ans;
        
//     }
// };

class Solution {
public:
    const int m = 1000000007;

    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        vector<int> left(n), right(n);

        // Calculate the number of elements to the left of each element that are greater than or equal to it
        stack<pair<int, int>> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && s.top().first >= arr[i]) {
                s.pop();
            }

            left[i] = (s.empty() ? i + 1 : i - s.top().second);
            s.push({arr[i], i});
        }

        while (!s.empty()) {
            s.pop();
        }

        // Calculate the number of elements to the right of each element that are greater than or equal to it
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && s.top().first > arr[i]) {
                s.pop();
            }

            right[i] = (s.empty() ? n - i : s.top().second - i);
            s.push({arr[i], i});
        }

        long long ans = 0; 
        for (int i = 0; i < n; i++) {
            ans = (ans + static_cast<long long>(left[i]) * right[i] % m * arr[i]) % m;
        }

        return static_cast<int>(ans);  
    }
};
