// class Solution {
// public:

//     int findMin(vector<vector<int>> &matrix, int rows, int i, int j, vector<vector<int>> &memo){
//         if(i == rows - 1){
//             return matrix[i][j];
//         }

//         if (memo[i][j] != -1) {
//             return memo[i][j];
//         }

//         if(j > 0 && j < rows-1){
//             memo[i][j] = matrix[i][j] + min(findMin(matrix, rows, i + 1, j - 1, memo), min(findMin(matrix, rows, i+1, j, memo), findMin(matrix, rows, i + 1, j + 1, memo)));
//         }
//         else if(j == 0){
//             memo[i][j] = matrix[i][j] + min(findMin(matrix, rows, i + 1, j, memo), findMin(matrix, rows, i + 1, j + 1, memo));
//         }

//         else if(j == rows - 1){
//             memo[i][j] = matrix[i][j] + min(findMin(matrix, rows, i + 1, j, memo), findMin(matrix, rows, i + 1, j - 1, memo));
//         }
//         return memo[i][j];
//     }
//     int minFallingPathSum(vector<vector<int>>& matrix) {
//         int rows = matrix.size();

//         if(rows == 1)
//             return matrix[0][0];
        
//         vector<vector<int>> memo(rows, vector<int>(rows, -1));

//         int ans = INT_MAX;

//         for(int i = 0 ; i < rows ; i++){
//             ans =  min(ans, findMin(matrix, rows, 0, i, memo));
//         }
//         return ans;
//     }
// };

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        
        if (rows == 1) {
            return matrix[0][0];
        }

        vector<vector<int>> dp(rows, vector<int>(rows, INT_MAX));

        for (int j = 0; j < rows; j++) {
            dp[rows - 1][j] = matrix[rows - 1][j];
        }

        for (int i = rows - 2; i >= 0; i--) {
            for (int j = 0; j < rows; j++) {
                dp[i][j] = matrix[i][j] + min(dp[i + 1][j], min(dp[i + 1][max(0, j - 1)], dp[i + 1][min(rows - 1, j + 1)]));
            }
        }

        int ans = INT_MAX;
        for (int j = 0; j < rows; j++) {
            ans = min(ans, dp[0][j]);
        }

        return ans;
    }
};
